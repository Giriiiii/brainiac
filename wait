import bot from './assets/bot.svg'
import user from './assets/user.svg'

const from = document.querySelector('form');
const chatContainer = document.querySelector('#chat_container')

let loadInterval; 

function loader(element) {
  element.textContent = '';

  loadInterval = setInterval(() =>{
     element.textContent += '.';

     if (element.textContent === '....') {
      element.textContent = '';
     }
  }, 300)
}

function typeText(element, text) {
  let index = 0;
  let interval = setInteral (() => {
    if (index < text.length) {
      element.innerHTML += text.chartAt(index);
      index++;
    } else {
      clearInterval(interval);
    }
  }, 20)
}

function generateUniqueId() {
  const timestamp = Date.now();
  const randomNumber = Math.random();
  const hexadecimalString = randomNumber.toString(16);

  return `id-${timestamp}-${hexadecimalString}`;
}

function chatStripe (isAi, value, uniqueId) {
  return (
    `
    <div class="wrapper ${isAi && 'ai'}">
    <div class="chat">
    <div className="profile">
    <img
    src="${isAi ? bot : user}"
    alt="${isAi ? "bot" : "user"}"
    />
    </div>
    <div class="message" id=${uniqueId}>${value}</div>
    </div>
    </div>
    `
  )
}

const handleSubmit = async (e) => {
  e.preventDefault()

  const data = new FormData(form);

  //user's chatstripe
  chatContainer.innerHTML += chatStripe(false, data.get('prompt'));

  form.reset();

  //bot's chatstripe 
  const uniqueId = generateUniqueId();
  chatContainer.innerHTML += chatStripe(true, "", uniqueId);

  chatContainer.scrollTop = chatContainer.scrollHeight;

  const messageDiv = document.getElementById(uniqueId);

  loader(messageDiv);
}

form.addEventListener('submit', handleSubmit);
form.addEventListener('keyup', (e) => {
  if (e.keyCode === 13) {
    handleSubmit(e);
  }
})



import express from 'express' ;
import * as dotenv from 'dotenv';
import cors from 'cors';
import { Configuration, OpenAIApi } from 'openai';

dotenv. config();
const configuration = new Configuration({
  apikey: process.env.OPENAI_APT_KEY,
});
const openai = new OpenAIApi(configuration);
const app = express ();
app.use(cors());
app.use(express.json());

app.get('/', async (req, res) => {
    res.status(200).send({
        message: 'Hello from CodeX',
    })
});
app.post('/', async (req, res) => {
    try {
        const prompt = req.body.prompt;
        const response = await openai.createCompletion({
            model:"text-davinci-003",
            prompt: `${prompt}`,
            temperature:0,
            max_tokens: 3000,
            top_p:1,
            frequency_penalty:0.5,
            presence_penalty:0,
        });

        res.status(200).send({
            bot: response.data.choices[0].text
        })
    } catch (error) {
        console.log(error);
        res.status(500).send({error})
    }
})

app.listen(5000, () => console.log('Server is running on port https://localhost:5000'))



<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Codex - Your Coding AI</title>
    <link rel="stylesheet" href = "style.css">
  </head>
  <body>
    <div id="app">
      <div id="chat_container"></div>
      <form>
        <textarea name="prompt" rows="1" cols="1" placeholder="Ask Codex..."></textarea>
       <button type="submit"><img src="assets/send.svg"/></button>
      </form>
    </div>
    <script type="module" src="script.js"></script>
  </body>
</html>

width: 100%;
  max-width: 1180px;
  margin: 0 auto;
  padding: 10px;
  background: #f2f3f4;
  display: flex;
  flex-direction: row;
  gap: 10px;